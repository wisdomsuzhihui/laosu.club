extends ../../shade/layout
block content
  .container#container(ref='container')
  
  script.
    //- 4.3 用代理实现单例模式
    ;(function(){
    /*
      现在我们通过引入代理类的方式，来解决上面提到的问题。
      我们依然使用 4.2 节中的代码，首先在 CreateDiv 构造函数中，把负责管理单例的代码移除
      出去，使它成为一个普通的创建 div 的类：
    */
      var CreateDiv = function(html){
        this.html = html;
        this.init();
      };

      CreateDiv.prototype.init = function(){
        var div = document.createElement('div');
        div.innerHTML = this.html;
        document.body.appendChild(div);
      }

      //- 接下来引入代理类 proxySingletonCreateDiv 
      var proxySingletonCreateDiv = (function(){
        var instance;
        return function(html){
          if(!instance){
            instance = new CreateDiv(html);
          }
          return instance;          
        }

      })();

      var a = new proxySingletonCreateDiv('sven1');
      var b = new proxySingletonCreateDiv('sven2');

      console.log(a===b);
      
      /*
        通过引入代理类的方式，我们同样完成了一个单例模式的编写，跟之前不同的是，现在我们
        把负责管理单例的逻辑移到了代理类 proxySingletonCreateDiv 中。这样一来， CreateDiv 就变成了
        一个普通的类，它跟 proxySingletonCreateDiv 组合起来可以达到单例模式的效果。

        本例是缓存代理的应用之一，在第 6章中，我们将继续了解代理带来的好处。
      */
    })();