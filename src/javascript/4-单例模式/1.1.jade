extends ../../shade/layout
block content
  .container#container(ref='container')

  script.
    /*
      单例模式的定义是：保证一个类仅有一个实例，并提供一个访问它的全局访问点。
      单例模式是一种常用的模式，有一些对象我们往往只需要一个，比如线程池、全局缓存、浏
      览器中的 window 对象等。在 JavaScript开发中，单例模式的用途同样非常广泛。试想一下，当我
      们单击登录按钮的时候，页面中会出现一个登录浮窗，而这个登录浮窗是唯一的，无论单击多少
      次登录按钮，这个浮窗都只会被创建一次，那么这个登录浮窗就适合用单例模式来创建。
    */
      
      ;(function(){
        /*
          要实现一个标准的单例模式并不复杂，无非是用一个变量来标志当前是否已经为某个类创建
          过对象，如果是，则在下一次获取该类的实例时，直接返回之前创建的对象。代码如下：
        */
        var Singleton = function(name){
          this.name = name;
          this.instance = null;  
        };

        Singleton.prototype.getName = function(){
          console.log(this.name);
        }
        Singleton.getInstance = function(name){
          if(!this.instance){
            this.instance = new Singleton(name);
          }
          return this.instance;
        };

        //- 或者:
        var Singleton1 = function( name ){
          this.name = name;
        };
        Singleton1.prototype.getName = function(){
          alert ( this.name );
        };
        Singleton1.getInstance = (function(){
          var instance = null;
          return function( name ){
          if ( !instance ){
            instance = new Singleton1( name );
          }
          return instance;
        }
        })(); 

        
        var a = Singleton.getInstance('sven1');
        var b = Singleton.getInstance('sven2');
        var a1 = Singleton1.getInstance('sven1');
        var b1 = Singleton1.getInstance('sven2');

        console.log( a===b); // true;
        console.log( a1===b1); // true;
      })();
      
    