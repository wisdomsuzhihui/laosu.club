extends ../../shade/layout
block content

  .container#container(ref='container')
    button#button 按钮
  script.
    // 15.4 用 AOP 装饰函数
    //- 首先给出 Function.prototype.before 方法和 Function.prototype.after 方法：
    Function.prototype.before = function(beforefn){
        // 保存原函数的引用
        var _self = this; 
        // 返回包含了原函数和新函数的"代理"函数
        return function(){
            // 执行新函数，且保证 this 不被劫持，新函数接受的参数
            // 也会被原封不动地传入原函数，新函数在原函数之前执行
            beforefn.apply(this, arguments);
            // 执行原函数并返回原函数的执行结果，
            // 并且保证 this 不被劫持
            return _self.apply(this, arguments);
        }
    }

    Function.prototype.after = function(afterfn){
        var _self = this;
        return function(){
            var ret = _self.apply(this, arguments);
            afterfn.apply(this,arguments);
            return ret;
        }
    };

    document.getElementById = document.getElementById.before(function(){
        console.log(1);
    });
    var button = document.getElementById( 'button' );
    console.log(button);
    // 输出： Uncaught TypeError: Illegal invocation
    /*
        异常发生在(1) 处的 _getElementById( id ) 这句代码上，此时 _getElementById 是一个全局函数，当调用一个全局函数时， this 是指向 window 的，而 document.getElementById 方法的内部实现需要使用 this 引用， this 在这个方法内预期是指向 document ，而不是 window , 这是错误发生的原因，所以使用现在的方式给函数增加功能并不保险。
        改进后的代码可以满足需求，我们要手动把 document 当作上下文 this 传入 _getElementById ：
    */
    var _getElementById = document.getElementById;
    