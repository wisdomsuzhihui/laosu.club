extends ../../shade/layout
block content

  .container#container(ref='container')
    #div1 我是div1
    #div2 我是div2
    #div3 我是div3

  script.
    ;(function(){
      /*
        call 和 apply 最常见的用途是改变函数内部的 this 指向，我们来看个例子：
      */
      var obj1 = {
        name: 'sven'
      };

      var obj2 = {
        name: 'anne'
      };

      window.name = 'laosu';

      var getName = function(){
        console.log(this.name);
      };

      getName(); // laosu
      getName.call(obj1); // sven
      getName.call(obj2); // anne

      document.getElementById('div1').onclick = function(){
        console.log(this.id); // div1
        var func = function(){
          console.log(this.id); // undefined
        }
        func();
      };
      /*
        这时候我们用 call 来修正 func 函数内的 this ，使其依然指向 div ：
      */
      document.getElementById('div2').onclick = function(){
        console.log(this.id); // div2
        var func = function(){
          console.log(this.id); // div2
        }
        func.call(this);
      };
      
      /*
        使用 call 来修正 this 的场景，我们并非第一次遇到，在上一小节关于 this 的学习中，我们就曾经修正过 document.getElementById 函数内部“丢失”的 this ，代码如下：
      */

      document.getElementById = (function(func){
        return function(){
          return func.apply(document, arguments);
        }
      })(document.getElementById);

      var getId = document.getElementById;
      var div = getId('div3');
      div.style.background='red';
      
    })('1. 改变 this 指向');

    ;(function(){
      /*
        大部分高级浏览器都实现了内置的 Function.prototype.bind ，用来指定函数内部的 this 指向，即使没有原生的 Function.prototype.bind 实现，我们来模拟一个也不是难事，代码如下：
      */
      Function.prototype.bind = function(context){
        var self = this; // 保存原函数
        return function(){ // 返回一个新的函数
          // 执行新的函数的时候，会把之前传入的 context
          // 当作新函数体内的 this
          return self.apply(context,arguments);
        }
      };
      
      var obj = {
        name: 'laosu'
      };
      var obj2 = {
        name: 'suzhihui'
      }
      var func= function(){
        console.log(this.name +':from Function prototype.bind') // laosu
      }.bind(obj);

      func();
      
    })('Function.prototype.bind');

    ;(function(){
      /*
        我们通过 Function.prototype.bind 来“包装” func 函数，并且传入一个对象 context 当作参 数，这个 context 对象就是我们想修正的 this 对象。
        在 Function.prototype.bind 的内部实现中，我们先把 func 函数的引用保存起来，然后返回一个新的函数。当我们在将来执行 func 函数时，实际上先执行的是这个刚刚返回的新函数。在新函数内部， self.apply( context, arguments ) 这句代码才是执行原来的 func 函数，并且指定 context
        对象为 func 函数体内的 this 。
        这是一个简化版的 Function.prototype.bind 实现，通常我们还会把它实现得稍微复杂一点，使得可以往 func 函数中预先填入一些参数：
      */
      Function.prototype.bind = function(){
        var self = this, // 保存原函数
            context = [].shift.call(arguments), // 需要绑定的 this 上下文
            args = [].slice.call(arguments); // 剩余的参数转成数组
        return function(){
          // 执行新的函数的时候，会把之前传入的 context 当作新函数体内的 this
          // 并且组合两次分别传入的参数，作为新函数的参数
          console.log(context + ':' + args +'=='+ [].slice.call(arguments))
          return self.apply(context,[].concat.call(args,[].slice.call(arguments)));
        }
      };
      var obj = {
        name: 'laosu'
      };

      var func = function(a,b,c,d,e,f,g){
        console.log(this.name); // laosu
        console.log([a,b,c,d,e,f,g]); // [1,2,3,4]
      }.bind(obj,1,2)

      func(3,4,5,6,7);
      
    })('Function.prototype.bind复杂版');

    ;(function(){
      // 借用方法的第一种场景是“借用构造函数”，通过这种技术，可以实现一些类似继承的效果：
      var A = function(name){
        this.name = name;
      };
      var B = function(){
        A.apply(this,arguments);
      };
      B.prototype.getName = function(){
        return this.name;
      };
      var b = new B('laosu');
      console.log(b.getName()); // 'laosu'

      /*
        借用方法的第二种运用场景跟我们的关系更加密切。
        函数的参数列表 arguments 是一个类数组对象，虽然它也有“下标”，但它并非真正的数组，
        所以也不能像数组一样，进行排序操作或者往集合里添加一个新的元素。这种情况下，我们常常
        会借用 Array.prototype 对象上的方法。比如想往 arguments 中添加一个新的元素，通常会借用
        Array.prototype.push ：
      */
      ;(function(){
        Array.prototype.push.call(arguments,3);
        console.log(arguments); // [1,2,3]
      })(1,2);
      /*
        在操作 arguments 的时候，我们经常非常频繁地找 Array.prototype 对象借用方法。
        想把 arguments 转成真正的数组的时候，可以借用 Array.prototype.slice 方法；想截去
        arguments 列表中的头一个元素时，又可以借用 Array.prototype.shift 方法。那么这种机制的内
        部实现原理是什么呢？我们不妨翻开 V8的引擎源码，以 Array.prototype.push 为例，看看 V8引
        擎中的具体实现：
      */
      /*
        function ArrayPush() {
          var n = TO_UINT32( this.length ); // 被 push 的对象的 length
          var m = %_ArgumentsLength(); // push 的参数个数
          for (var i = 0; i < m; i++) {
          this[ i + n ] = %_Arguments( i ); // 复制元素 (1)
          }
          this.length = n + m; // 修正 length 属性的值 (2)
          return this.length;
        };
      */
      /*
        通过这段代码可以看到， Array.prototype.push 实际上是一个属性复制的过程，把参数按照
        下标依次添加到被 push 的对象上面，顺便修改了这个对象的 length 属性。至于被修改的对象是
        谁，到底是数组还是类数组对象，这一点并不重要。
        由此可以推断，我们可以把“任意”对象传入 Array.prototype.push 
      */
      var a = {};
      Array.prototype.push.call(a,'first');
      console.log(a.length); // 1;
      console.log(a[0]); // first;

      /*
      这段代码在绝大部分浏览器里都能顺利执行，但由于引擎的内部实现存在差异，如果在低版本的 IE浏览器中执行，必须显式地给对象 a 设置 length 属性：
      */
      var a1 = {
        length: 0
      }
      Array.prototype.push.call(a1,'laosu','szh');
      console.log(a1.length); // 2
      console.log(a1[0]+'|'+a1[1]); // laosu szh

      /*
        前面我们之所以把“任意”两字加了双引号，是因为可以借用 Array.prototype.push 方法的对象还要满足以下两个条件，从 ArrayPush 函数的(1)处和(2)处也可以猜到，这个对象至少还要满足：
          对象本身要可以存取属性；
          对象的 length 属性可读写。
        对于第一个条件，对象本身存取属性并没有问题，但如果借用 Array.prototype.push 方法的不是一个 object 类型的数据，而是一个 number 类型的数据呢? 我们无法在 number 身上存取其他数据，那么从下面的测试代码可以发现，一个 number 类型的数据不可能借用到 Array.prototype.
        push 方法：
      */
      var a = 1;
      Array.prototype.push.call(a, 'first');
      console.log(a.length); // undefined
      console.log(a[0]); // undefined
      
    })('3. 借用其他对象的方法');