extends ../../shade/layout
block content

  .container#container(ref='container')
    button#execute 点击我执行命令
    button#undo 点击我执行命令
    script.
      // 3.1.5 用闭包实现命令模式

      var Tv = {
        open: function(){
          console.log('打开电视机');
        },
        close: function(){
          console.log('关上电视机');
        }
      };

      var OpenTvCommand = function(receiver){
        this.receiver = receiver;
      };

      OpenTvCommand.prototype.execute = function(){
        this.receiver.open(); // 执行命令，打开电视机
      };

      OpenTvCommand.prototype.undo = function(){
        this.receiver.close(); // 撤销命令，关闭电视机
      };

      var setCommand = function( command ){
        document.getElementById('execute').onclick= function(){
          command.execute(); // 输出：打开电视机
        }
        document.getElementById('undo').onclick=function(){
          command.undo(); // 输出：关闭电视机
        }
      };

      setCommand(new OpenTvCommand(Tv));

      /*
        命令模式的意图是把请求封装为对象，从而分离请求的发起者和请求的接收者（执行者）之间的耦合关系。在命令被执行之前，可以预先往命令对象中植入命令的接收者。
        但在 JavaScript中，函数作为一等对象，本身就可以四处传递，用函数对象而不是普通对象来封装请求显得更加简单和自然。如果需要往函数对象中预先植入命令的接收者，那么闭包可以完成这个工作。在面向对象版本的命令模式中，预先植入的命令接收者被当成对象的属性保存起来；而在闭包版本的命令模式中，命令接收者会被封闭在闭包形成的环境中，代码如下：
      */

      var Tv1 = {
        open: function(){
          console.log('打开电视机 === > 闭包');
        },
        close: function(){
          console.log('关上电视机 === > 闭包');
        }
      };

      var createCommand1 = function( receiver ){
        var execute = function(){
          return receiver.open(); // 执行命令，打开电视机
        }

        var undo = function(){
          return receiver.close(); // 执行命令，关闭电视机
        }

        return {
          execute: execute,
          undo: undo
        }
      };

      var setCommand1 = function ( command ){
        document.getElementById('execute').onmouseover=function(){
          command.execute(); // 输出：打开电视机
        }
        document.getElementById( 'undo' ).onmouseover = function(){
          command.undo(); // 输出：关闭电视机
        }
      }

      setCommand1( createCommand1(Tv1));