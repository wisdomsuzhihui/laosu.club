extends ../../shade/layout
block content

  .container#container(ref='container')
  
  script.
    //  闭包的更多作用
    ;(function(){
      /*
        闭包可以帮助把一些不需要暴露在全局的变量封装成“私有变量”。假设有一个计算乘积的简单函数：
      */
      var mult = function(){
        var a = 1; 
        for( var i=0, l = arguments.length; i<l; i++){
          a = a*arguments[i];
        }
        return a;
      };
      /*
        mult 函数接受一些 number 类型的参数，并返回这些参数的乘积。现在我们觉得对于那些相同的参数来说，每次都进行计算是一种浪费，我们可以加入缓存机制来提高这个函数的性能：
      */
      var cache={};
      var mult = function(){
        var args = Array.prototype.join.call(arguments,',');
        if(cache[args]){
          return cache[args] + '缓存数据';
        }
        var a = 1;
        for(var i = 0,l=arguments.length;i<l; i++){
          a = a* arguments[i];
        }

        return cache[args] = a;
      };
      console.log(mult(1,2,3));
      console.log(mult(1,2,3));
      /*
        我们看到 cache 这个变量仅仅在 mult 函数中被使用，与其让 cache 变量跟 mult 函数一起平行地暴露在全局作用域下，不如把它封闭在 mult 函数内部，这样可以减少页面中的全局变量，以避免这个变量在其他地方被不小心修改而引发错误。代码如下：
      */
      var mult1 = (function(){
        var cache = {};
        return function(){
          var args = Array.prototype.join.call(arguments,',');
          if(args in cache){
            return cache[args] + '缓存数据1';
          }
          var a = 1;
          for(var i = 0, l = arguments.length; i< l; i++){
            a = a * arguments[i];
          }
          return cache[args] = a;
        }
      })();
      console.log(mult1(4,5))
      console.log(mult1(4,5))
      /*
        提炼函数是代码重构中的一种常见技巧。如果在一个大函数中有一些代码块能够独立出来，我们常常把这些代码块封装在独立的小函数里面。独立出来的小函数有助于代码复用，如果这些小函数有一个良好的命名，它们本身也起到了注释的作用。如果这些小函数不需要在程序的其他地方使用，最好是把它们用闭包封闭起来。代码如下：
      */
      var mult2 = (function(){
        var cache = {};
        // 封闭 calculate 函数
        var calculate = function(){
          var a = 1;
          for(var i = 0, l = arguments.length; i < l; i++){
            a = a * arguments[i];
          }
          return a;
        };

        return function(){
          var args = Array.prototype.join.call(arguments, ',');
          if( args in cache){
            return cache[args] + '缓存数据1';
          }
          return cache[args] = calculate.apply(null,arguments);
        }
      })();
      console.log(mult2(3,7))
      console.log(mult2(3,7))
    })('1. 封装变量');

    ;(function(){
      // img 对象经常用于进行数据上报，如下所示:
      var report = function( src ){
        var img = new Image();
        img.src = src;
      };
      report('http://xxx.com/getUserInfo');

      /*
        但是通过查询后台的记录我们得知，因为一些低版本浏览器的实现存在 bug，在这些浏览器下使用 report 函数进行数据上报会丢失 30%左右的数据，也就是说， report 函数并不是每一次都成功发起了 HTTP请求。丢失数据的原因是 img 是 report 函数中的局部变量，当 report 函数的调用结束后， img 局部变量随即被销毁，而此时或许还没来得及发出 HTTP 请求，所以此次请求就会丢失掉。
        现在我们把 img 变量用闭包封闭起来，便能解决请求丢失的问题：
      */
      var report1 = (function(){
        var imgs = [];
        return function(src){
          var img = new Image();
          img.push( img );
          img.src = src;
        }
      })();
    })('2. 延续局部变量的寿命');