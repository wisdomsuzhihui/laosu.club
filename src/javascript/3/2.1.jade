extends ../../shade/layout
block content

  .container#container(ref='container')
  script.
    /*
      3.2 高阶函数
      高阶函数是指至少满足下列条件之一的函数。
        函数可以作为参数被传递；
        函数可以作为返回值输出。
      JavaScript 语言中的函数显然满足高阶函数的条件，在实际开发中，无论是将函数当作参数传递，还是让函数的执行结果返回另外一个函数，这两种情形都有很多应用场景，下面就列举一些高阶函数的应用场景。
    */

    /*
      3.2.1 函数作为参数传递
      把函数当作参数传递，这代表我们可以抽离出一部分容易变化的业务逻辑，把这部分业务逻辑放在函数参数中，这样一来可以分离业务代码中变化与不变的部分。其中一个重要应用场景就是常见的回调函数。
    */
    ;(function(){
     /*
      在 ajax 异步请求的应用中，回调函数的使用非常频繁。当我们想在 ajax 请求返回之后做一些事情，但又并不知道请求返回的确切时间时，最常见的方案就是把 callback 函数当作参数传入发起 ajax 请求的方法中，待请求完成之后执行 callback 函数：
     */ 

     // 1.  参数
     // userId = news_10285
     var getUserInfo = function(userId, callback){
       $.ajax('http://devapi.zczj.com/api/News/GetComment?ObjectID='+ userId,function(data){
         console.log(callback)
         if(typeof callback === 'function'){
           callback(data);
         }
       });
     }

     getUserInfo('news_10285',function(data){
       console.log('ok');
     })
     /*
      回调函数的应用不仅只在异步请求中，当一个函数不适合执行一些请求时，我们也可以把这些请求封装成一个函数，并把它作为参数传递给另外一个函数，“委托”给另外一个函数来执行。比如，我们想在页面中创建 100个 div 节点，然后把这些 div 节点都设置为隐藏。下面是一种编写代码的方式：
     */
     var appendDiv = function(callback){
       for (var i = 0; i< 100; i++){
         var div = document.createElement('div');
         div.innerHTML = i;
         document.getElementById('container').appendChild(div);
        //-  div.style.display='none';
        if(typeof callback === 'function'){
          callback(div);
        }
       }
     };

     appendDiv(function(node){
       node.style.width= 100+'px';
       node.style.height= 100+'px';
       node.style.float='left';
       node.style.borderWidth=1+'px';
       node.style.borderColor='#ccc';
       node.style.borderStyle='dashed';
       node.style.lineHeight=100+'px';
       node.style.textAlign='center';
       node.style.fontSize=30+'px';
     });
     
     
    })('1. 回调函数');

    ;(function(){
      // 2.  Array.prototype.sort
     /*
      Array.prototype.sort 接受一个函数当作参数，这个函数里面封装了数组元素的排序规则。从Array.prototype.sort 的使用可以看到，我们的目的是对数组进行排序，这是不变的部分；而使用什么规则去排序，则是可变的部分。把可变的部分封装在函数参数里，动态传入Array.prototype.sort ，使 Array.prototype.sort 方法成为了一个非常灵活的方法，代码如下:
     */
     // 从小到大排列
     var str = [1, 4, 3].sort( function(a,b){
        return a - b;
     });
     console.log(str); // 输出: [ 1, 3, 4 ]
     // 从大到小排列
     var str2 = [1, 4, 3].sort( function(a,b){
        return b - a;
     });
     console.log(str2); // 输出: [ 4, 3, 1 ]
    })('2.  Array.prototype.sort');