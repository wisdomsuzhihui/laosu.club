extends ../../shade/layout
block content

  .container#container(ref='container')
    #div 点击我绑定事件
  script.
    // 3.2.4 高阶函数的其他应用
    ;(function(){
      /*
        currying 又称部分求值。一个 currying 的函数首先会接受一些参数，接受了这些参数之后该函数并不会立即求值，而是继续返回另外一个函数，刚才传入的参数在函数形成的闭包中被保存起来。待到函数被真正需要求值的时候，之前传入的所有参数都会被一次性用于求值。

        假设我们要编写一个计算每月开销的函数。在每天结束之前，我们都要记录今天花掉了多少钱。代码如下：
      */
      var monthlyCost = 0;
      var cost = function(money){
        monthlyCost += money;
       
      }
      cost( 100 ); // 第 1 天开销
      cost( 200 ); // 第 2 天开销
      cost( 300 ); // 第 3 天开销
      //cost( 700 ); // 第 30 天开销
      console.log(monthlyCost); // 输出：600
      /*
        如果在每个月的前 29天，我们都只是保存好当天的开销，直到第 30天才进行求值计算，这样就达到了我们的要求。虽然下面的 cost 函数还不是一个 currying 函数的完整实现，但有助于我们了解其思想：
      */
      var cost = (function(){
        var args=[];
        return function(){
          if(arguments.length === 0){
            var money = 0;
            for(var i = 0, l = args.length; i < l; i++){
              money += args[i];
            }
            return money;
          }else{
            [].push.apply(args, arguments);
          }
        }
      })();
      cost(100);
      cost(200);
      cost(300);
      console.log(cost());  // 求值并输出：600
    })('1.  currying');

    ;(function(){
      /*
        接下来我们编写一个通用的 function currying(){} ， function currying(){} 接受一个参数，即将要被 currying 的函数。在这个例子里，这个函数的作用遍历本月每天的开销并求出它们的总和。代码如下：
      */
      var currying = function(fn){
        var args=[];
        return function(){
          if(arguments.length === 0){
            return fn.apply(this, args)
          }else{
            [].push.apply( args, arguments);
            
            // 在函数内部，有两个特殊的对象：arguments 和 this。其中， arguments 的主要用途是保存函数参数， 但这个对象还有一个名叫 callee 的属性，该属性是一个指针，指向拥有这个 arguments 对象的函数。http://www.cnblogs.com/lijinwen/p/5727550.html
            return arguments.callee;
          }
        }
      }
      var cost=(function(){
        var money = 0;

        return function(){
          for(var i = 0, l = arguments.length; i<l; i++ ){
            money += arguments[i];
          }
          return money;
        }

      })();

      var cost = currying(cost) ;
      cost(100);
      cost(200);
      cost(300);

      console.log(cost()); // 600;
    })('2. 真正的currying')

    ;(function(){
      var obj1 = {
        name: 'sven'
      };
      var obj2 = {
        getName: function(){
          return this.name;
        }
      };
      console.log( obj2.getName.call( obj1 ) ); // 输出：sven

      // 我们常常让类数组对象去借用 Array.prototype 的方法，这是 call 和 apply 最常见的应用场景之一：
      (function(){
        // arguments 借用 Array.prototype.push 方法
        Array.prototype.push.call(arguments, 4);
        console.log( arguments )
      })(1,2,3);

      /*
        那么有没有办法把泛化 this 的过程提取出来呢？本小节讲述的 uncurrying 就是用来解决这个问题的。 uncurrying 的话题来自 JavaScript之父 Brendan Eich在 2011年发表的一篇 Twitter。以下代码是 uncurrying 的实现方式之一：
      */
      Function.prototype.uncurrying = function(){
        var self = this;
        return function(){
          var obj = Array.prototype.shift.call(arguments);
          return self.apply(obj, arguments);
        }
      }
      /*
        在讲解这段代码的实现原理之前，我们先来瞧瞧它有什么作用。在类数组对象 arguments 借用 Array.prototype 的方法之前，先把 Array.prototype.push.call这句代码转换为一个通用的 push 函数:
      */
      var push = Array.prototype.push.uncurrying();
      (function(){
        push(arguments, 4);
        console.log(arguments); // 输出[1,2,3,4]
      })(1,2,3)
      /*
        通过 uncurrying 的方式， Array.prototype.push.call 变成了一个通用的 push 函数。这样一来，push 函数的作用就跟 Array.prototype.push 一样了，同样不仅仅局限于只能操作 array 对象。而对于使用者而言，调用 push 函数的方式也显得更加简洁和意图明了。
        我们还可以一次性地把 Array.prototype 上的方法“复制”到 array 对象上，同样这些方法可操作的对象也不仅仅只是 array 对象：
      */
      for ( var i = 0, fn, ary = [ 'push', 'shift', 'forEach' ]; fn = ary[ i++ ]; ){
        Array[ fn ] = Array.prototype[ fn ].uncurrying();
      };

      var obj = {
        "length": 3,
        "0": 1,
        "1": 2,
        "2": 3
      };
      Array.push( obj, 4 ); // 向对象中添加一个元素
      console.log( obj.length ); // 输出：4
      
      var first = Array.shift( obj ); // 截取第一个元素
      console.log( first ); // 输出：1
      console.log( obj ); // 输出：{0: 2, 1: 3, 2: 4, length: 3}

      Array.forEach( obj, function( i, n ){
        console.log( n ); // 分别输出：0, 1, 2
      });
      
    })('2.  uncurrying');

    ;(function(){
      /*
        JavaScript 中的函数大多数情况下都是由用户主动调用触发的，除非是函数本身的实现不合理，否则我们一般不会遇到跟性能相关的问题。但在一些少数情况下，函数的触发不是由用户直接控制的。在这些场景下，函数有可能被非常频繁地调用，而造成大的性能问题。下面将列举一些这样的场景。
      */
      /*
        (1) 函数被频繁调用的场景
         window.onresize 事件。我们给 window 对象绑定了 resize 事件，当浏览器窗口大小被拖动
          而改变的时候，这个事件触发的频率非常之高。如果我们在 window.onresize 事件函数里
          有一些跟 DOM节点相关的操作，而跟 DOM节点相关的操作往往是非常消耗性能的，这
          时候浏览器可能就会吃不消而造成卡顿现象。
         mousemove 事件。同样，如果我们给一个 div 节点绑定了拖曳事件（主要是 mousemove ），当
          div 节点被拖动的时候，也会频繁地触发该拖曳事件函数。
          上传进度。微云的上传功能使用了公司提供的一个浏览器插件。该浏览器插件在真正开
          始上传文件之前，会对文件进行扫描并随时通知 JavaScript函数，以便在页面中显示当前
          的扫描进度。但该插件通知的频率非常之高，大约一秒钟 10次，很显然我们在页面中不
          需要如此频繁地去提示用户。
      */

      /*
        (3) 函数节流的代码实现
        关于函数节流的代码实现有许多种，下面的 throttle 函数的原理是，将即将被执行的函数用
        setTimeout 延迟一段时间执行。如果该次延迟执行还没有完成，则忽略接下来调用该函数的请求。
        throttle 函数接受 2个参数，第一个参数为需要被延迟执行的函数，第二个参数为延迟执行的时
        间。具体实现代码如下：
      */
      
      var throttle = function( fn, interval){
        var _self = fn, // 保存需要被延迟执行的函数引用
            timer, // 定时器
            firstTime = true; // 是否是第一次调用

        return function(){
          var args  = arguments,
              _me = this;

          // 如果是第一次调用，不需延迟执行
          if(firstTime){
            _self.apply(_me, args);
            return firstTime = false;
          }
          // 如果定时器还在，说明前一次延迟执行还没有完成
          if(timer){
            return false;
          }

          timer = setTimeout(function(){
            clearTimeout(timer);
            timer = null;
            console.log(args)
            _self.apply(_me,args);
          }, interval || 500);
        };
      };

      window.onresize = throttle(function(){
        console.log(1)
      },1000)

    })('3. 函数节流')

    ;(function(){
     /*
      在前面关于函数节流的讨论中，我们提供了一种限制函数被频繁调用的解决方案。下面我们
      将遇到另外一个问题，某些函数确实是用户主动调用的，但因为一些客观的原因，这些函数会严
      重地影响页面性能。
      一个例子是创建 WebQQ的 QQ好友列表。列表中通常会有成百上千个好友，如果一个好友
      用一个节点来表示，当我们在页面中渲染这个列表的时候，可能要一次性往页面中创建成百上千
      个节点。
      在短时间内往页面中大量添加 DOM节点显然也会让浏览器吃不消，我们看到的结果往往就
      是浏览器的卡顿甚至假死。代码如下：
     */ 
     var ary = [];
     for(var i = 1; i<100000; i++){
       ary.push(i); // 假设 ary 装载了 1000 个好友的数据
     }
     var renderFriendList = function(data){
       for(var i=0,l=data.length; i<l; i++){
         var div = document.createElement('div');
         div.innerHTML = i;
         document.body.appendChild(div);
       }
     };
    //-  renderFriendList(ary);
     /*
      这个问题的解决方案之一是下面的 timeChunk 函数， timeChunk 函数让创建节点的工作分批进
      行，比如把 1秒钟创建 1000个节点，改为每隔 200毫秒创建 8个节点。
      timeChunk 函数接受 3个参数，第 1个参数是创建节点时需要用到的数据，第 2个参数是封装
      了创建节点逻辑的函数，第 3个参数表示每一批创建的节点数量。代码如下：
     */
     
     var timeChunk = function( ary, fn, count){
       var obj,
            t;
       var len = ary.length;

       var start = function(){
         for(var i=0; i<Math.min(count || 1, ary.length); i++){
           var obj = ary.shift();
           fn(obj);
         }
       };

       return function(){
         t=setInterval(function(){
           if(ary.length === 0){
             return clearInterval(t)
           }
           start();
         }, 200); // 分批执行的时间间隔，也可以用参数的形式传入
       };
     };
     /*
      最后我们进行一些小测试，假设我们有 1000个好友的数据，我们利用 timeChunk 函数，每一
      批只往页面中创建 8个节点：
     */
     var renderFriendList1 = timeChunk(ary, function(n){
       var div = document.createElement('div');
       div.innerHTML = n;
       document.body.appendChild(div)
     },8);
     renderFriendList1();
     
       
    })('4. 分时函数');

    ;(function(){
      /*
        在 Web 开发中，因为浏览器之间的实现差异，一些嗅探工作总是不可避免。比如我们需要
        一个在各个浏览器中能够通用的事件绑定函数 addEvent ，常见的写法如下：
      */
      var addEvent = function( elem, type, handler){
        if(window.addEventListener){
          return elem.addEventListener(type, handler, false);
        }
        if(window.attachEvent){
          return elem.attachEvent('on'+ type, handler);
        }
      };
      /*
        这个函数的缺点是，当它每次被调用的时候都会执行里面的 if 条件分支，虽然执行这些 if
        分支的开销不算大，但也许有一些方法可以让程序避免这些重复的执行过程。

        第二种方案是这样，我们把嗅探浏览器的操作提前到代码加载的时候，在代码加载的时候就
        立刻进行一次判断，以便让 addEvent 返回一个包裹了正确逻辑的函数。代码如下：
      */
      var addEvent = (function(){
        if(window.addEventListener){
          return function(elem, type, handler){
            elem.addEventListener(type, handler, false)
          }
        }
        if(window.attachEvent){
          return function(elem, type, handler){
            elem.attachEvent('on' + type, handler);
          }
        }
      })();
      /*
        目前的 addEvent 函数依然有个缺点，也许我们从头到尾都没有使用过 addEvent 函数，这样看
        来，前一次的浏览器嗅探就是完全多余的操作，而且这也会稍稍延长页面 ready的时间。


        第三种方案即是我们将要讨论的惰性载入函数方案。此时 addEvent 依然被声明为一个普通函
        数，在函数里依然有一些分支判断。但是在第一次进入条件分支之后，在函数内部会重写这个函
        数，重写之后的函数就是我们期望的 addEvent 函数，在下一次进入 addEvent 函数的时候， addEvent
        函数里不再存在条件分支语句：
      */
      var addEvent = function(elem, type, handler){
        if( window.addEventListener){
          addEvent = function(elem, type, handler){
            elem.addEventListener(type, handler, false);
          }
        }else if( window.attachEvent){
          addEvent = function(elem, type, handler){
            elem.attachEvent('on'+ type, handler);
          }
        }

        addEvent(elem, type, handler);
        
      }
      
      var div = document.getElementById('div');
      addEvent(div, 'click', function(){
        console.log(1)
      })
      addEvent(div,'mousemove', function(){
        console.log(2)
      })
      
    })('5. 惰性加载函数')