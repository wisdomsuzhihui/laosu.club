extends ../../shade/layout
block content

  .container#container(ref='container')

    script.
      ;(function(){
        var makeSound = function(animal){
          if(animal instanceof Duck){
            console.log('嘎嘎嘎');
          }else if(animal instanceof Chicken){
            console.log('咯咯咯');
          }
        };

        var Duck = function(){};
        var Chicken = function(){};

        makeSound(new Duck());
        makeSound(new Chicken());
        /*
          这段代码确实体现了“多态性”，当我们分别向鸭和鸡发出“叫唤”的消息时，它们根据此
          消息作出了各自不同的反应。但这样的“多态性”是无法令人满意的，如果后来又增加了一只动
          物，比如狗，显然狗的叫声是“汪汪汪”，此时我们必须得改动 makeSound 函数，才能让狗也发出
          叫声。修改代码总是危险的，修改的地方越多，程序出错的可能性就越大，而且当动物的种类越
          来越多时， makeSound 有可能变成一个巨大的函数
        */
      })('一段“多态”的JavaScript代码');

      ;(function(){
        // 首先我们把不变的部分隔离出来
        var makeSound = function(animal){
          animal.sound();
        };

        var Duck = function(){}

        Duck.prototype.sound = function(){
          console.log('嘎嘎嘎');
        };

        var Chicken = function(){}

        Chicken.prototype.sound= function(){
          console.log('咯咯咯'); 
        };
        
        makeSound(new Duck());
        makeSound(new Chicken());

        var Dog = function(){}

        Dog.prototype.sound=function(){
          console.log('汪汪汪');
        }

        makeSound(new Dog());
      })('1.2.2 对象的多态性');

      ;(function(){
        /*
          假设我们要编写一个地图应用，现在有两家可选的地图 API提供商供我们接入自己的应用。
          目前我们选择的是谷歌地图，谷歌地图的 API中提供了 show 方法，负责在页面上展示整个地图。
          示例代码如下：
        */
        var googleMap = {
          show: function(){
            console.log('开始渲染谷歌地图')
          }
        };

        var renderMap = function(){
          googleMap.show();
        }

        renderMap(); // 输出：开始渲染谷歌地图
        
      })('1.2.6 多态在面向对象程序设计中的作用');

      ;(function(){
        /*
          后来因为某些原因，要把谷歌地图换成百度地图，为了让 renderMap 函数保持一定的弹性，
          我们用一些条件分支来让 renderMap 函数同时支持谷歌地图和百度地图：
        */

        var googleMap = {
          show: function(){
            console.log( '开始渲染谷歌地图' );
          }
        };
        var baiduMap = {
            show: function(){
            console.log( '开始渲染百度地图' );
          }
        };

        var renderMap = function(type){
          if(type === 'google'){
            google.Map.show();
          }else if(type === 'baidu'){
            google.Map.show();
          }
        }

        renderMap( 'google' ); // 输出：开始渲染谷歌地图
        renderMap( 'baidu' ); // 输出：开始渲染百度地图
      })();

      ;(function(){
        /*
          可以看到，虽然 renderMap 函数目前保持了一定的弹性，但这种弹性是很脆弱的，一旦需要
          替换成搜搜地图，那无疑必须得改动 renderMap 函数，继续往里面堆砌条件分支语句.
          我们还是先把程序中相同的部分抽象出来，那就是显示某个地图：
        */
        var renderMap = function(map){
          if(map.show.instanceof Function){
            map.show();
          }
        };

        var googleMap = {
          show: function(){
            console.log( '开始渲染谷歌地图' );
          }
        };
        var baiduMap = {
            show: function(){
            console.log( '开始渲染百度地图' );
          }
        };
        var sosoMap = {
          show: function(){
            console.log( '开始渲染搜搜地图' );
          }
        };
        renderMap( googleMap ); // 输出：开始渲染谷歌地图
        renderMap( baiduMap ); // 输出：开始渲染百度地图
        renderMap( sosoMap ); // 输出：开始渲染搜搜地图

        /*
            注：在这个例子中，我们假设每个地图 API提供展示地图的方法名都是 show ，在实际开发中也许
            不会如此顺利，这时候可以借助适配器模式来解决问题。
        */
      })('')